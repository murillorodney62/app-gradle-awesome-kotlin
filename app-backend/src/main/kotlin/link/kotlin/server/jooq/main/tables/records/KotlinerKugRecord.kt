/*
 * This file is generated by jOOQ.
 */
package link.kotlin.server.jooq.main.tables.records


import java.time.LocalDate

import link.kotlin.server.jooq.main.tables.KotlinerKug

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KotlinerKugRecord() : TableRecordImpl<KotlinerKugRecord>(KotlinerKug.KOTLINER_KUG), Record3<Long?, Long?, LocalDate?> {

    var kotlinerId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var kugId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var joinDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, LocalDate?> = super.fieldsRow() as Row3<Long?, Long?, LocalDate?>
    override fun valuesRow(): Row3<Long?, Long?, LocalDate?> = super.valuesRow() as Row3<Long?, Long?, LocalDate?>
    override fun field1(): Field<Long?> = KotlinerKug.KOTLINER_KUG.KOTLINER_ID
    override fun field2(): Field<Long?> = KotlinerKug.KOTLINER_KUG.KUG_ID
    override fun field3(): Field<LocalDate?> = KotlinerKug.KOTLINER_KUG.JOIN_DATE
    override fun component1(): Long? = kotlinerId
    override fun component2(): Long? = kugId
    override fun component3(): LocalDate? = joinDate
    override fun value1(): Long? = kotlinerId
    override fun value2(): Long? = kugId
    override fun value3(): LocalDate? = joinDate

    override fun value1(value: Long?): KotlinerKugRecord {
        this.kotlinerId = value
        return this
    }

    override fun value2(value: Long?): KotlinerKugRecord {
        this.kugId = value
        return this
    }

    override fun value3(value: LocalDate?): KotlinerKugRecord {
        this.joinDate = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: LocalDate?): KotlinerKugRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised KotlinerKugRecord
     */
    constructor(kotlinerId: Long? = null, kugId: Long? = null, joinDate: LocalDate? = null): this() {
        this.kotlinerId = kotlinerId
        this.kugId = kugId
        this.joinDate = joinDate
    }

    /**
     * Create a detached, initialised KotlinerKugRecord
     */
    constructor(value: link.kotlin.server.jooq.main.tables.pojos.KotlinerKug?): this() {
        if (value != null) {
            this.kotlinerId = value.kotlinerId
            this.kugId = value.kugId
            this.joinDate = value.joinDate
        }
    }
}
