/*
 * This file is generated by jOOQ.
 */
package link.kotlin.server.jooq.main.tables.records


import java.time.LocalDate

import link.kotlin.server.jooq.main.tables.Kug

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KugRecord() : UpdatableRecordImpl<KugRecord>(Kug.KUG), Record8<Long?, String?, String?, String?, String?, Double?, Double?, LocalDate?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var continent: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var country: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var url: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var latitude: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    var longitude: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    var created: LocalDate?
        set(value): Unit = set(7, value)
        get(): LocalDate? = get(7) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, String?, String?, String?, String?, Double?, Double?, LocalDate?> = super.fieldsRow() as Row8<Long?, String?, String?, String?, String?, Double?, Double?, LocalDate?>
    override fun valuesRow(): Row8<Long?, String?, String?, String?, String?, Double?, Double?, LocalDate?> = super.valuesRow() as Row8<Long?, String?, String?, String?, String?, Double?, Double?, LocalDate?>
    override fun field1(): Field<Long?> = Kug.KUG.ID
    override fun field2(): Field<String?> = Kug.KUG.CONTINENT
    override fun field3(): Field<String?> = Kug.KUG.NAME
    override fun field4(): Field<String?> = Kug.KUG.COUNTRY
    override fun field5(): Field<String?> = Kug.KUG.URL
    override fun field6(): Field<Double?> = Kug.KUG.LATITUDE
    override fun field7(): Field<Double?> = Kug.KUG.LONGITUDE
    override fun field8(): Field<LocalDate?> = Kug.KUG.CREATED
    override fun component1(): Long? = id
    override fun component2(): String? = continent
    override fun component3(): String? = name
    override fun component4(): String? = country
    override fun component5(): String? = url
    override fun component6(): Double? = latitude
    override fun component7(): Double? = longitude
    override fun component8(): LocalDate? = created
    override fun value1(): Long? = id
    override fun value2(): String? = continent
    override fun value3(): String? = name
    override fun value4(): String? = country
    override fun value5(): String? = url
    override fun value6(): Double? = latitude
    override fun value7(): Double? = longitude
    override fun value8(): LocalDate? = created

    override fun value1(value: Long?): KugRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): KugRecord {
        this.continent = value
        return this
    }

    override fun value3(value: String?): KugRecord {
        this.name = value
        return this
    }

    override fun value4(value: String?): KugRecord {
        this.country = value
        return this
    }

    override fun value5(value: String?): KugRecord {
        this.url = value
        return this
    }

    override fun value6(value: Double?): KugRecord {
        this.latitude = value
        return this
    }

    override fun value7(value: Double?): KugRecord {
        this.longitude = value
        return this
    }

    override fun value8(value: LocalDate?): KugRecord {
        this.created = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: String?, value6: Double?, value7: Double?, value8: LocalDate?): KugRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised KugRecord
     */
    constructor(id: Long? = null, continent: String? = null, name: String? = null, country: String? = null, url: String? = null, latitude: Double? = null, longitude: Double? = null, created: LocalDate? = null): this() {
        this.id = id
        this.continent = continent
        this.name = name
        this.country = country
        this.url = url
        this.latitude = latitude
        this.longitude = longitude
        this.created = created
    }

    /**
     * Create a detached, initialised KugRecord
     */
    constructor(value: link.kotlin.server.jooq.main.tables.pojos.Kug?): this() {
        if (value != null) {
            this.id = value.id
            this.continent = value.continent
            this.name = value.name
            this.country = value.country
            this.url = value.url
            this.latitude = value.latitude
            this.longitude = value.longitude
            this.created = value.created
        }
    }
}
