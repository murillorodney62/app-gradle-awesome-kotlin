/*
 * This file is generated by jOOQ.
 */
package link.kotlin.server.jooq.main.tables.daos


import java.time.LocalDate

import kotlin.collections.List

import link.kotlin.server.jooq.main.tables.Kug
import link.kotlin.server.jooq.main.tables.records.KugRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KugDao(configuration: Configuration?) : DAOImpl<KugRecord, link.kotlin.server.jooq.main.tables.pojos.Kug, Long>(Kug.KUG, link.kotlin.server.jooq.main.tables.pojos.Kug::class.java, configuration) {

    /**
     * Create a new KugDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: link.kotlin.server.jooq.main.tables.pojos.Kug): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): link.kotlin.server.jooq.main.tables.pojos.Kug? = fetchOne(Kug.KUG.ID, value)

    /**
     * Fetch records that have <code>continent BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfContinent(lowerInclusive: String?, upperInclusive: String?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.CONTINENT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>continent IN (values)</code>
     */
    fun fetchByContinent(vararg values: String): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.CONTINENT, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.NAME, *values)

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountry(lowerInclusive: String?, upperInclusive: String?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.COUNTRY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    fun fetchByCountry(vararg values: String): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.COUNTRY, *values)

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUrl(lowerInclusive: String?, upperInclusive: String?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    fun fetchByUrl(vararg values: String): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.URL, *values)

    /**
     * Fetch records that have <code>latitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLatitude(lowerInclusive: Double?, upperInclusive: Double?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.LATITUDE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>latitude IN (values)</code>
     */
    fun fetchByLatitude(vararg values: Double): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.LATITUDE, *values.toTypedArray())

    /**
     * Fetch records that have <code>longitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLongitude(lowerInclusive: Double?, upperInclusive: Double?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.LONGITUDE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>longitude IN (values)</code>
     */
    fun fetchByLongitude(vararg values: Double): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.LONGITUDE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreated(lowerInclusive: LocalDate?, upperInclusive: LocalDate?): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetchRange(Kug.KUG.CREATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    fun fetchByCreated(vararg values: LocalDate): List<link.kotlin.server.jooq.main.tables.pojos.Kug> = fetch(Kug.KUG.CREATED, *values)
}
